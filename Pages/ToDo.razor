@page "/todo"
@inject IDialogService DialogService

<h2 id="by_header">By Ghais</h2>
<head>

</head>
<div>
    <h1>todos</h1>

    <MudTextField Variant="Variant.Text"
                  @bind-Value="@task" placeholder="Enter your todo"
                  @onkeyup="@SubmitByEnter" />
    <button type="button" @onclick="AddTask" class="btn btn-primary"> Add task</button>

    <br />
    <br />
</div>

    <MudDropContainer T="DropItem" Items="@_items" @ref="_container" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ontimeupdate="1" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            @for (int i = 0; i < 3; i++)
            {
            var dropzone = i==0 ? "To Do" : (i==1 ? "Doing" : "Done");
            <MudPaper Class="ma-4 flex-grow-1">
                    <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader>
                            @dropzone
                        </MudListSubheader>
                        <MudDropZone T="DropItem" Identifier="@dropzone" Class="flex-grow-1" AllowReorder="true" />
                    </MudList>
                </MudPaper>
            }
        </ChildContent>
        <ItemRenderer>
            <MudListItem Text="@context.Name" />
        </ItemRenderer>
    </MudDropContainer>



@code {
    int nrOfTasks = 0;
    string? task = null;
    List<Todo> tasks = new List<Todo>();
    List<Todo> tasksDone = new List<Todo>();
    private List<DropItem> _items = new List<DropItem>();
    private MudDropContainer<DropItem> _container;

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }


    public class DropItem
    {
        public string Name { get; set; }
        public string Selector { get; set; }
    }

    void SubmitByEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "NumpadEnter")
        {
            Console.WriteLine("Task Added");
            AddTask();
        }
    }
   

    void AddTask()
    {
        if (!String.IsNullOrEmpty(task?.Trim(' ')))
        {
            tasks.Add(new Todo { Text = task, Id = nrOfTasks++ });
            _items.Add(new DropItem() { Name = task, Selector = "To Do" });
        }
        StateHasChanged();
        _container.Refresh();
        task = null;
    }

    void DeleteTask(Todo item)
    {
        tasks.Remove(item);
        tasksDone.Add(item);
    }
}