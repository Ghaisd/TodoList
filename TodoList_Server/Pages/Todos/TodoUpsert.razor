@page "/todo/create"
@page "/todo/edit/{id:int}"
@inject ITodoRepository _todoRepository
@inject NavigationManager _navigationManager

@using TodoList_DataAccess

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Todo</h3>
    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {

            <EditForm Model="Todo" OnValidSubmit="UpsertTodo">
                <DataAnnotationsValidator />
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Todo.Text" class="form-control"></InputText>
                    <ValidationMessage For="()=>Todo.Text"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="todo" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }


    private TodoDTO Todo { get; set; } = new TodoDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }


     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (Id == 0)
            {
                //create
                IsLoading = false;
            }
            else
            {
                //update
                Title = "Update";
                await LoadTodo();
            }
        }
    }

     private async Task LoadTodo()
    {
        IsLoading = true;
        StateHasChanged();
        Todo = await _todoRepository.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }

     private async Task UpsertTodo()
    {
        if (Todo.Id == 0)
        {
            //create
            await _todoRepository.Create(Todo);
        }
        else
        {
            //update
            await _todoRepository.Update(Todo);
        }
        _navigationManager.NavigateTo("/todo");
    }

}
